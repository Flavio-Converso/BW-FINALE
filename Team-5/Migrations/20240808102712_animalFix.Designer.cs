// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Team_5.Context;

#nullable disable

namespace Team_5.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240808102712_animalFix")]
    partial class animalFix
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("RolesUsers", b =>
                {
                    b.Property<int>("RolesIdRole")
                        .HasColumnType("int");

                    b.Property<int>("UsersIdUser")
                        .HasColumnType("int");

                    b.HasKey("RolesIdRole", "UsersIdUser");

                    b.HasIndex("UsersIdUser");

                    b.ToTable("RolesUsers");
                });

            modelBuilder.Entity("Team_5.Models.Auth.Roles", b =>
                {
                    b.Property<int>("IdRole")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRole"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdRole");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Team_5.Models.Auth.Users", b =>
                {
                    b.Property<int>("IdUser")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdUser"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdUser");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Username")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Team_5.Models.Clinic.Animals", b =>
                {
                    b.Property<int>("IdAnimal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdAnimal"));

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("BreedIdBreed")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("NumMicrochip")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<int?>("OwnerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IdAnimal");

                    b.HasIndex("BreedIdBreed");

                    b.HasIndex("OwnerId");

                    b.ToTable("Animals");
                });

            modelBuilder.Entity("Team_5.Models.Clinic.Breeds", b =>
                {
                    b.Property<int>("IdBreed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdBreed"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdBreed");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Breeds");
                });

            modelBuilder.Entity("Team_5.Models.Clinic.Examinations", b =>
                {
                    b.Property<int>("IdExamination")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdExamination"));

                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExaminationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ExaminationName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Treatment")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdExamination");

                    b.HasIndex("AnimalId");

                    b.ToTable("Examinations");
                });

            modelBuilder.Entity("Team_5.Models.Clinic.Hospitalizations", b =>
                {
                    b.Property<int>("IdHospitalization")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdHospitalization"));

                    b.Property<int>("AnimalId")
                        .HasColumnType("int");

                    b.Property<DateTime>("HospDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsHospitalized")
                        .HasColumnType("bit");

                    b.HasKey("IdHospitalization");

                    b.HasIndex("AnimalId");

                    b.ToTable("Hospitalizations");
                });

            modelBuilder.Entity("Team_5.Models.Clinic.Owners", b =>
                {
                    b.Property<int>("IdOwner")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOwner"));

                    b.Property<string>("CF")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("UserIdUser")
                        .HasColumnType("int");

                    b.HasKey("IdOwner");

                    b.HasIndex("CF")
                        .IsUnique();

                    b.HasIndex("UserIdUser");

                    b.ToTable("Owners");
                });

            modelBuilder.Entity("Team_5.Models.Pharmacy.Companies", b =>
                {
                    b.Property<int>("IdCompany")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCompany"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("IdCompany");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Team_5.Models.Pharmacy.Drawers", b =>
                {
                    b.Property<int>("IdDrawer")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdDrawer"));

                    b.Property<int>("LockerId")
                        .HasColumnType("int");

                    b.HasKey("IdDrawer");

                    b.HasIndex("LockerId");

                    b.ToTable("Drawers");
                });

            modelBuilder.Entity("Team_5.Models.Pharmacy.Lockers", b =>
                {
                    b.Property<int>("IdLocker")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdLocker"));

                    b.Property<int>("NumLocker")
                        .HasColumnType("int");

                    b.HasKey("IdLocker");

                    b.ToTable("Lockers");
                });

            modelBuilder.Entity("Team_5.Models.Pharmacy.Orders", b =>
                {
                    b.Property<int>("IdOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdOrder"));

                    b.Property<int>("IdOwner")
                        .HasColumnType("int");

                    b.Property<int>("IdProduct")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderQuantity")
                        .HasColumnType("int");

                    b.Property<string>("PrescriptionNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdOrder");

                    b.HasIndex("IdOwner");

                    b.HasIndex("IdProduct");

                    b.HasIndex("PrescriptionNumber")
                        .IsUnique()
                        .HasFilter("[PrescriptionNumber] IS NOT NULL");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Team_5.Models.Pharmacy.Products", b =>
                {
                    b.Property<int>("IdProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdProduct"));

                    b.Property<bool>("Availability")
                        .HasColumnType("bit");

                    b.Property<int>("CompanyIdCompany")
                        .HasColumnType("int");

                    b.Property<int?>("DrawersIdDrawer")
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Use")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("IdProduct");

                    b.HasIndex("CompanyIdCompany");

                    b.HasIndex("DrawersIdDrawer");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("RolesUsers", b =>
                {
                    b.HasOne("Team_5.Models.Auth.Roles", null)
                        .WithMany()
                        .HasForeignKey("RolesIdRole")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team_5.Models.Auth.Users", null)
                        .WithMany()
                        .HasForeignKey("UsersIdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Team_5.Models.Clinic.Animals", b =>
                {
                    b.HasOne("Team_5.Models.Clinic.Breeds", "Breed")
                        .WithMany()
                        .HasForeignKey("BreedIdBreed")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team_5.Models.Clinic.Owners", "Owner")
                        .WithMany()
                        .HasForeignKey("OwnerId");

                    b.Navigation("Breed");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("Team_5.Models.Clinic.Examinations", b =>
                {
                    b.HasOne("Team_5.Models.Clinic.Animals", "Animal")
                        .WithMany("Examination")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");
                });

            modelBuilder.Entity("Team_5.Models.Clinic.Hospitalizations", b =>
                {
                    b.HasOne("Team_5.Models.Clinic.Animals", "Animal")
                        .WithMany("Hospitalization")
                        .HasForeignKey("AnimalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Animal");
                });

            modelBuilder.Entity("Team_5.Models.Clinic.Owners", b =>
                {
                    b.HasOne("Team_5.Models.Auth.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserIdUser")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Team_5.Models.Pharmacy.Drawers", b =>
                {
                    b.HasOne("Team_5.Models.Pharmacy.Lockers", "Lockers")
                        .WithMany("Drawers")
                        .HasForeignKey("LockerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Lockers");
                });

            modelBuilder.Entity("Team_5.Models.Pharmacy.Orders", b =>
                {
                    b.HasOne("Team_5.Models.Clinic.Owners", "Owner")
                        .WithMany()
                        .HasForeignKey("IdOwner")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team_5.Models.Pharmacy.Products", "Product")
                        .WithMany("Order")
                        .HasForeignKey("IdProduct")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Owner");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Team_5.Models.Pharmacy.Products", b =>
                {
                    b.HasOne("Team_5.Models.Pharmacy.Companies", "Company")
                        .WithMany("Products")
                        .HasForeignKey("CompanyIdCompany")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Team_5.Models.Pharmacy.Drawers", "Drawers")
                        .WithMany()
                        .HasForeignKey("DrawersIdDrawer");

                    b.Navigation("Company");

                    b.Navigation("Drawers");
                });

            modelBuilder.Entity("Team_5.Models.Clinic.Animals", b =>
                {
                    b.Navigation("Examination");

                    b.Navigation("Hospitalization");
                });

            modelBuilder.Entity("Team_5.Models.Pharmacy.Companies", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Team_5.Models.Pharmacy.Lockers", b =>
                {
                    b.Navigation("Drawers");
                });

            modelBuilder.Entity("Team_5.Models.Pharmacy.Products", b =>
                {
                    b.Navigation("Order");
                });
#pragma warning restore 612, 618
        }
    }
}
